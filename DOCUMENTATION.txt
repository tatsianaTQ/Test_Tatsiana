==================================================
DOCUMENTATION DU PROJET - WEEKLY DATA COLLECTOR
==================================================

Ce document détaille le fonctionnement interne, la logique et les points clés du projet d'automatisation de collecte de données.


---------------------------
1. OBJECTIF DU PROJET
---------------------------

Le but est d'automatiser un processus manuel et répétitif :
1.  Lancer plusieurs scripts Python (scrapers) qui naviguent sur un site web pour collecter des données.
2.  Chaque scraper génère un fichier CSV et un fichier Excel.
3.  Une fois tous les scrapers terminés, rassembler tous les fichiers générés dans une seule archive ZIP, nommée avec la date du jour.
4.  Envoyer cette archive par e-mail à une liste de destinataires prédéfinis.
5.  Nettoyer les fichiers sources (CSV/Excel) pour ne conserver que l'archive ZIP et les logs.
6.  Planifier cette tâche pour une exécution hebdomadaire sans intervention manuelle.


---------------------------
2. LOGIQUE DE FONCTIONNEMENT
---------------------------

Le cœur du projet est le script `run.py`. Il agit comme un chef d'orchestre et suit les étapes suivantes :

1.  **Initialisation :**
    - Met en place le système de logging : tous les messages (INFO, ERROR, etc.) sont à la fois affichés dans la console et enregistrés dans un fichier horodaté dans le dossier `/logs`. C'est essentiel pour le débogage des exécutions automatiques.
    - Charge les variables d'environnement depuis le fichier `.env` (identifiants SMTP, destinataires).

2.  **Exécution des Scrapers :**
    - Le script parcourt la liste `SCRIPTS_TO_RUN` définie au début du fichier.
    - Pour chaque scraper, il utilise le module `subprocess` de Python pour le lancer dans un processus séparé. Cette méthode est robuste car elle isole chaque scraper. Si l'un d'eux échoue, le processus principal peut le détecter et arrêter l'exécution globale.
    - L'option `-m` (ex: `python -m src.scrapers.1_page_acceuil...`) est utilisée pour que Python traite les scripts comme des modules, ce qui résout les problèmes d'imports relatifs (ex: `from src.common...`).

3.  **Création de l'Archive ZIP :**
    - Si tous les scrapers se sont terminés avec succès, le script recherche dans le dossier `/output` tous les fichiers `.csv` et `.xlsx` contenant la date du jour dans leur nom.
    - Il crée une archive ZIP (`rapport_hebdomadaire_AAAA-MM-JJ.zip`) et y ajoute tous les fichiers trouvés.

4.  **Envoi de l'E-mail :**
    - Le script se connecte au serveur SMTP spécifié dans le fichier `.env` (ici, SendGrid).
    - Il construit un e-mail avec un sujet, un corps de texte, et attache l'archive ZIP.
    - Il gère plusieurs destinataires principaux (`EMAIL_TO`) et en copie (`EMAIL_CC`), en les séparant par des virgules dans le fichier `.env`.

5.  **Nettoyage :**
    - Si l'e-mail a été envoyé avec succès, le script supprime les fichiers CSV et Excel qui ont été archivés, afin de garder le dossier `/output` propre. Seul le fichier ZIP est conservé comme preuve de l'exécution.

6.  **Fin du Processus :**
    - Le script enregistre la durée totale de l'exécution et se termine.


---------------------------
3. DÉBOGAGE ET ERREURS COURANTES
---------------------------

- **PermissionError: [WinError 5] Accès refusé: 'output'**
  - **Cause :** Le script n'a pas les droits pour créer des dossiers/fichiers. Cela se produit presque toujours lorsque la tâche planifiée est exécutée depuis un répertoire système (ex: `C:\Windows\System32`).
  - **Solution :** Remplir le champ **"Démarrer dans"** dans les propriétés de l'action de la tâche planifiée avec le chemin complet du dossier du projet.

- **ModuleNotFoundError: No module named 'src'**
  - **Cause :** Python ne trouve pas les modules locaux car le script est exécuté depuis un autre répertoire.
  - **Solution :** Utiliser la commande `python -m nom.du.module` et s'assurer que le champ "Démarrer dans" est correctement configuré (voir point précédent).

- **L'e-mail n'est pas envoyé (erreur d'authentification)**
  - **Cause :** L'identifiant (`SMTP_USER`) ou le mot de passe (`SMTP_PASSWORD`) dans le fichier `.env` est incorrect.
  - **Solution :** Vérifier que la clé API SendGrid est correcte et qu'elle n'a pas expiré.

- **La fenêtre noire (cmd) apparaît et disparaît instantanément**
  - **Cause :** Erreur dans le fichier `run.bat` (chemin incorrect vers Python ou le script) ou erreur de permission fondamentale.
  - **Solution :** Ajouter temporairement la commande `pause` à la fin de `run.bat` pour voir le message d'erreur avant que la fenêtre ne se ferme.


---------------------------
4. CONFIGURATION DE L'AUTOMATISATION
---------------------------

L'automatisation repose sur le **Planificateur de tâches de Windows** et le fichier `run.bat`.

- **`run.bat` :** Ce fichier sert de pont simple entre Windows et Python. Il garantit que le bon interpréteur Python (celui de l'environnement virtuel `.venv`) est utilisé pour lancer le script principal. Les chemins doivent être **absolus** pour éviter toute ambiguïté.

- **Planificateur de tâches :**
  - **"N'exécuter que si l'utilisateur a ouvert une session" :** C'est l'option la plus simple. La tâche se lancera à l'heure prévue, mais seulement si vous êtes connecté à votre session Windows. C'est une solution de contournement si vous n'avez pas les droits administratifs nécessaires.
  - **"Exécuter même si l'utilisateur n'est pas connecté" :** C'est l'option idéale pour une autonomie complète. Cependant, elle requiert que votre compte utilisateur dispose du droit de sécurité "Ouvrir une session en tant que tâche" (`Log on as a batch job`). Ce droit doit être accordé par un administrateur système.
